using UnityEngine; using UnityEngine.UI; using UnityEngine.SceneManagement; using System.Collections; using System.Collections.Generic;   public class PhotonController : Photon.MonoBehaviour {      [SerializeField] Text connectionText;     [SerializeField] InputField inputRoomName;     Camera sceneCameraComponent;     GameObject stage;     float stageX;     float stageZ;     [SerializeField] GameObject player;     [SerializeField] Transform content;     List<GameObject> joinRoomButtonList;     [SerializeField] GameObject subScreen;     RoomInfo[] roomInfo;     [SerializeField] Text roomNameText2;     [SerializeField] Text playerCount;     [SerializeField] GameObject roomPrefab;     GameObject joinRoomButton;       void Start()     {         PhotonNetwork.ConnectUsingSettings("0.1");         StartCoroutine("UpdateConnectionString");         DontDestroyOnLoad(this);         joinRoomButtonList = new List<GameObject>();         SceneManager.sceneLoaded += OnSceneLoaded;     }      IEnumerator UpdateConnectionString()     {         while (true)         {             connectionText.text = PhotonNetwork.connectionStateDetailed.ToString();             yield return null;         }     }      public void CreateRoom()     {         RoomOptions roomOptions = new RoomOptions() { isVisible = true, isOpen = true, maxPlayers = 4 };         PhotonNetwork.CreateRoom(inputRoomName.text, roomOptions, TypedLobby.Default);         roomNameText2.text = "RoomName;" + inputRoomName.text;         playerCount.text = "PlayerCount; 1";     }      void OnReceivedRoomListUpdate()     {         roomInfo = PhotonNetwork.GetRoomList();         for (int i = 0; i < roomInfo.Length; i++)         {             GameObject room = Instantiate(roomPrefab, new Vector3(0, 0, 0), Quaternion.identity, content);             GameObject roomName = room.transform.Find("RoomName").gameObject;             Text roomNameText = roomName.GetComponent<Text>();             roomNameText.text += roomInfo[i].name;             GameObject memberCount = room.transform.Find("PlayerCount").gameObject;             Text memberCountText = memberCount.GetComponent<Text>();             memberCountText.text += roomInfo[i].playerCount;             joinRoomButton = room.transform.Find("JoinRoomButton").gameObject;             Button joinRoomButtonComponent = joinRoomButton.GetComponent<Button>();             joinRoomButtonComponent.onClick.AddListener(JoinRoom);             joinRoomButtonList.Add(joinRoomButton);         }     }      public void JoinRoom(){         PhotonNetwork.JoinRoom(roomInfo[joinRoomButtonList.IndexOf(joinRoomButton)].name);         roomNameText2.text = "RoomName;" + roomInfo[joinRoomButtonList.IndexOf(joinRoomButton)].name;         playerCount.text = "PlayerCount;" + roomInfo[joinRoomButtonList.IndexOf(joinRoomButton)].playerCount.ToString()+"/4人";     }      public void OnJoinedRoom()     {         PhotonNetwork.isMessageQueueRunning = false;         subScreen.SetActive(true);     }      public void StartGame()     {         SceneManager.LoadScene("Main");     }      void OnSceneLoaded(Scene scene, LoadSceneMode mode)     {         PhotonNetwork.isMessageQueueRunning = true;         GameObject sceneCamera = GameObject.Find("SceneCamera");         sceneCameraComponent = sceneCamera.GetComponent<Camera>();         stage = GameObject.Find("Stage");         stageX = stage.GetComponent<Renderer>().bounds.size.x;         stageZ = stage.GetComponent<Renderer>().bounds.size.z;         StartSpawnProcess();     }      public void StartSpawnProcess()     {         sceneCameraComponent.enabled = true;         StartCoroutine(SpawnPlayer());     }      IEnumerator SpawnPlayer()     {         yield return new WaitForSeconds(3.0f);         Vector3 instantiatePosition = stage.transform.position + new Vector3(Random.Range(-stageX / 2, stageX / 2), 1, Random.Range(-stageZ / 2, stageZ / 2));         PhotonNetwork.Instantiate(player.name, instantiatePosition, Quaternion.identity, 0);         sceneCameraComponent.enabled = false;     } }    